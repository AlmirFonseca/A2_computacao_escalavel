services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    ports:
      -  "6379:6379"

  create_tables:
    image: create_tables:latest
    build: ./mock
    depends_on:
      - postgres
    volumes:
      - ./mock:/app
    command: python create_tables.py

  insert_data:
    image: insert_data:latest
    build: ./mock
    depends_on:
      - create_tables
      - postgres
      - webhook
    environment:
      WEBHOOK_HOST: webhook
      WEBHOOK_PORT: 5000
    volumes:
      - ./mock:/app
    command: python main.py

  
  data-processor-app:
    image: data_processor:latest
    build: ./server
    restart: on-failure
    depends_on:
      - create_tables
      - postgres
    environment:
      - DB_NAME=mydatabase
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./mock/mock_files:/processor/mock_files
      - ./tasks:/processor/tasks
      # - ./server:/app
    command: python data_processor.py

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # RabbitMQ default port
      - "15672:15672"  # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest  # Default RabbitMQ user (change in production)
      RABBITMQ_DEFAULT_PASS: guest  # Default RabbitMQ password (change in production)
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      retries: 10

  dash_app:
    build: ./dash_app
    container_name: dash_app
    ports:
      - "5000:5000"
    depends_on:
      - redis
    volumes:
      - ./dash_app:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379


  bonus-system-worker:
    build: ./events
    depends_on:
      - redis
      - rabbitmq
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_NAME=mydatabase
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - DB_HOST=postgres
    volumes:
      - ./events:/events
    command: celery -A bonus_system worker --loglevel=INFO --concurrency=10

  queue-consumer:
    build: ./events
    depends_on:
      - redis
      - postgres
      - rabbitmq
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_NAME=mydatabase
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - DB_HOST=postgres
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    volumes:
      - ./events:/events
    command: python queue_consumer.py

  # price-monitor:
  #   build: ./price_monitor
  #   depends_on:
  #     - postgres
  #   environment:
  #     - DB_NAME=mydatabase
  #     - DB_USER=myuser
  #     - DB_PASSWORD=mypassword
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #   volumes:
  #     - ./price_monitor:/app
  #   command: python price_monitor.py

  webhook:
    image: webhook:latest
    build: ./events
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    command: python webhook.py

  # price-updater:
  #   build: ./update_price
  #   depends_on:
  #     - postgres
  #   environment:
  #     - POSTGREE_CREDENTIALS__DBNAME=mydatabase
  #     - POSTGREE_CREDENTIALS__USER=myuser
  #     - POSTGREE_CREDENTIALS__PASSWORD=mypassword
  #     - POSTGREE_CREDENTIALS__HOST=postgres
  #     - POSTGREE_CREDENTIALS__PORT=5432
  #   volumes:
  #     - ./update_price:/app
  #   command: python update_prices.py

volumes:
  postgres_data:
